import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

# Sample data: you’d build this from your cleaned table
data = [
    {
        "Software": "R",
        "ARIMA": 1,
        "GARCH": 1,
        "Unit Root": 1,
        "Cointegration": 1,
        "VAR": 1,
        "Multivar GARCH": 1,
        "Latest Release Year": 2024,
        "OS Count": 3,  # e.g. Windows, Linux, macOS
        "Interface": "CLI & GUI",
        "Languages": "C, Fortran, R"
    },
    {
        "Software": "gretl",
        "ARIMA": 1,
        "GARCH": 1,
        "Unit Root": 1,
        "Cointegration": 1,
        "VAR": 1,
        "Multivar GARCH": 1,
        "Latest Release Year": 2023,
        "OS Count": 3,
        "Interface": "CLI & GUI",
        "Languages": "C"
    },
    {
        "Software": "PSPP",
        "ARIMA": 1,
        "GARCH": 0,
        "Unit Root": 0,
        "Cointegration": 0,
        "VAR": 0,
        "Multivar GARCH": 0,
        "Latest Release Year": 2022,
        "OS Count": 3,
        "Interface": "CLI & GUI",
        "Languages": "C"
    },
    {
        "Software": "JMulTi",
        "ARIMA": 1,
        "GARCH": 0,
        "Unit Root": 0,
        "Cointegration": 0,
        "VAR": 1,
        "Multivar GARCH": 0,
        "Latest Release Year": 2021,
        "OS Count": 2,
        "Interface": "GUI",
        "Languages": "Java"
    },
    {
        "Software": "RKWard",
        "ARIMA": 1,
        "GARCH": 0,
        "Unit Root": 0,
        "Cointegration": 0,
        "VAR": 1,
        "Multivar GARCH": 0,
        "Latest Release Year": 2022,
        "OS Count": 3,
        "Interface": "GUI & CLI",
        "Languages": "C++, ECMAScript"
    }
]

df = pd.DataFrame(data)

# Heatmap for the time series features
features = ["ARIMA", "GARCH", "Unit Root", "Cointegration", "VAR", "Multivar GARCH"]
heatmap_df = df.set_index("Software")[features]

# Convert 1/0 to labels and colors
heatmap_labels = heatmap_df.replace({1: "Yes", 0: "No"})
heatmap_colors = heatmap_df.replace({1: True, 0: False})

fig_heat = go.Figure(data=go.Heatmap(
    z = heatmap_df.values,
    x = features,
    y = heatmap_df.index,
    colorscale = ['lightgray','green'],
    zmin = 0,
    zmax = 1,
    showscale=False,
    hoverinfo="text",
    text = heatmap_labels.values
))
fig_heat.update_layout(title="Time Series Feature Support by GPL-Licensed Software",
                       xaxis_title="Feature",
                       yaxis_title="Software")

# Bar chart: how many features supported
df["Feature Count"] = df[features].sum(axis=1)
fig_bar = px.bar(df, x="Software", y="Feature Count",
                 title="Number of Time Series Features Supported")

# Maybe a scatter: Feature Count vs Release Recency
import datetime
current_year = datetime.datetime.now().year
df["Years Since Release"] = current_year - df["Latest Release Year"]
fig_scatter = px.scatter(df, x="Feature Count", y="Years Since Release",
                         size="OS Count", color="Interface",
                         hover_data=["Languages"],
                         title="Feature‐Count vs Release Recency (GPL Software)")

# And a table of general info:
table_fig = go.Figure(data=[go.Table(
    header=dict(values=["Software", "Latest Release Year", "OS Count", "Interface", "Languages"]),
    cells=dict(values=[df.Software, df["Latest Release Year"], df["OS Count"], df.Interface, df.Languages])
)])
table_fig.update_layout(title="General Information Summary")

# To display or save snapshots
fig_heat.show()
fig_bar.show()
fig_scatter.show()
table_fig.show()
